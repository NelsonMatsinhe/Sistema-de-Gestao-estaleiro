/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.FuncionarioDAO;
import controller.MaquinaDAO;
import controller.ProducaoDAO;
import java.awt.Color;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import model.Funcionario;
import model.Maquina;
import model.Material;
import model.Producao;
import model.tabelas.ProducaoTableModel;

//import model.Produto;
/**
 * class tela de registros das produto
 *
 * @author Nelson Matsinhe
 */
public class TelaProducao extends javax.swing.JInternalFrame {

    /**
     * Creates new form Produto
     */
    //GenericDAO prod = new GenericDAO<>(Produto.class);
    public TelaProducao() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui = (BasicInternalFrameUI) this.getUI();
        ui.setNorthPane(null);
        habilitarFormulario(false);
        carregarGrade();
        configurarListeners();

        // Botão Novo habilita o formulário
        btNovo.addActionListener(e -> habilitarFormulario(true));

        // Ação do botão Salvar
        btSalvar.addActionListener(e -> {
            if (validarFormulario()) {
                //    btEditarActionPerformed();
            }
        });

        rbtAlocar.addActionListener(e -> habilitarSalvar());
        rbtdesalocar.addActionListener(e -> habilitarSalvar());

        TbProducao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectRegistryTable();
            }
        });

    }
    /**
     *
     * as cores da campos
     */
    Color d = new Color(255, 0, 51);
    Color f = new Color(219, 220, 252);

    ProducaoDAO producaoDAO = new ProducaoDAO();
    MaquinaDAO maquinaDAO = new MaquinaDAO();
    FuncionarioDAO funcionarioDAO = new FuncionarioDAO();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estadoGroup = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TbProducao = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btCancelar = new javax.swing.JButton();
        btNovo = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();
        btEditar = new javax.swing.JButton();
        btExcluir = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        lblMessagem = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ftfProduto = new javax.swing.JFormattedTextField();
        btnUsuario = new javax.swing.JButton();
        ftfFuncionario = new javax.swing.JFormattedTextField();
        btnUsuario1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ftfMaquina = new javax.swing.JFormattedTextField();
        btnUsuario2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        rbtdesalocar = new javax.swing.JRadioButton();
        rbtAlocar = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        ftfMaterial = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        btAdicionarItem1 = new javax.swing.JButton();
        btRemoverItem1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        txtQuantidadeProduzida = new javax.swing.JSpinner();
        spQuantidadeMaterial = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 102, 102));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel6.setBackground(new java.awt.Color(51, 102, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtID.setPreferredSize(new java.awt.Dimension(300, 25));
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        jPanel6.add(txtID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 260, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID:");
        jPanel6.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 10, 53, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jPanel6.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(508, 148, 31, -1));

        TbProducao.setModel(new ProducaoTableModel());
        TbProducao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TbProducaoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TbProducao);

        jPanel6.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 203, 761, 252));

        btCancelar.setText("Cancelar");
        btCancelar.setFocusable(false);
        btCancelar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btCancelar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btCancelar.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btCancelar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btNovo.setText("Novo");
        btNovo.setFocusable(false);
        btNovo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btNovo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btNovo.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btNovo.setPreferredSize(new java.awt.Dimension(64, 22));
        btNovo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.setFocusable(false);
        btSalvar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btSalvar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btSalvar.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btSalvar.setPreferredSize(new java.awt.Dimension(64, 22));
        btSalvar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        btEditar.setText("Editar");
        btEditar.setFocusable(false);
        btEditar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btEditar.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btEditar.setPreferredSize(new java.awt.Dimension(64, 22));
        btEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        btExcluir.setText("Excluir");
        btExcluir.setFocusable(false);
        btExcluir.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btExcluir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btExcluir.setMargin(new java.awt.Insets(2, 8, 2, 8));
        btExcluir.setPreferredSize(new java.awt.Dimension(64, 22));
        btExcluir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(btEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSalvar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btNovo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btNovo, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(btSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(btEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addComponent(btExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel6.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 203, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Produto:");
        jPanel6.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 90, 60, -1));
        jPanel6.add(lblMessagem, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 170, 529, 23));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Maquina:");
        jPanel6.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        ftfProduto.setEditable(false);
        ftfProduto.setColumns(25);
        ftfProduto.setPreferredSize(new java.awt.Dimension(260, 25));
        jPanel6.add(ftfProduto, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 90, 260, -1));

        btnUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons8-plus-29.png"))); // NOI18N
        btnUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuarioActionPerformed(evt);
            }
        });
        jPanel6.add(btnUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, -1, 20));

        ftfFuncionario.setEditable(false);
        ftfFuncionario.setColumns(25);
        ftfFuncionario.setPreferredSize(new java.awt.Dimension(260, 25));
        jPanel6.add(ftfFuncionario, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 260, -1));

        btnUsuario1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons8-plus-29.png"))); // NOI18N
        btnUsuario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuario1ActionPerformed(evt);
            }
        });
        jPanel6.add(btnUsuario1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, -1, 20));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Funcionario:");
        jPanel6.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, -1));

        ftfMaquina.setEditable(false);
        ftfMaquina.setColumns(25);
        ftfMaquina.setPreferredSize(new java.awt.Dimension(260, 25));
        jPanel6.add(ftfMaquina, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 260, -1));

        btnUsuario2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons8-plus-29.png"))); // NOI18N
        btnUsuario2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuario2ActionPerformed(evt);
            }
        });
        jPanel6.add(btnUsuario2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, -1, 20));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("  Quant Material:");
        jPanel6.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 120, -1));

        rbtdesalocar.setBackground(new java.awt.Color(51, 102, 0));
        estadoGroup.add(rbtdesalocar);
        rbtdesalocar.setForeground(new java.awt.Color(255, 255, 255));
        rbtdesalocar.setText("Disalocar");
        rbtdesalocar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtdesalocarActionPerformed(evt);
            }
        });
        jPanel6.add(rbtdesalocar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, -1, -1));

        rbtAlocar.setBackground(new java.awt.Color(51, 102, 0));
        estadoGroup.add(rbtAlocar);
        rbtAlocar.setForeground(new java.awt.Color(255, 255, 255));
        rbtAlocar.setText("Alocar");
        rbtAlocar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtAlocarActionPerformed(evt);
            }
        });
        jPanel6.add(rbtAlocar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 70, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Alocar:");
        jPanel6.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        ftfMaterial.setEditable(false);
        ftfMaterial.setColumns(25);
        ftfMaterial.setPreferredSize(new java.awt.Dimension(260, 25));
        jPanel6.add(ftfMaterial, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 260, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Quantidade  Produzida:");
        jPanel6.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 130, 160, -1));

        btAdicionarItem1.setToolTipText("Adicionar item");
        btAdicionarItem1.setPreferredSize(new java.awt.Dimension(35, 30));
        btAdicionarItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarItem1ActionPerformed(evt);
            }
        });
        jPanel6.add(btAdicionarItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, -1, -1));

        btRemoverItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons8-menos-16.png"))); // NOI18N
        btRemoverItem1.setToolTipText("Remover item");
        btRemoverItem1.setPreferredSize(new java.awt.Dimension(35, 30));
        btRemoverItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverItem1ActionPerformed(evt);
            }
        });
        jPanel6.add(btRemoverItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, -1, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Material:");
        jPanel6.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 60, -1));
        jPanel6.add(txtQuantidadeProduzida, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 130, 260, -1));
        jPanel6.add(spQuantidadeMaterial, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 50, 150, -1));

        jPanel1.setBackground(new java.awt.Color(51, 102, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setBackground(new java.awt.Color(102, 102, 102));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Registro de Produção");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(296, 296, 296)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 960, 620);
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDActionPerformed

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed

    }//GEN-LAST:event_btNovoActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        if (validarFormulario()) {
            try {
                Producao producao = new Producao();

                // Obter funcionário selecionado
                Funcionario funcionarioSelecionado = (Funcionario) ftfFuncionario.getValue();
                if (funcionarioSelecionado == null) {
                    throw new Exception("Selecione um funcionário");
                }

                // Obter máquina selecionada
                Maquina maquinaSelecionada = (Maquina) ftfMaquina.getValue();
                if (maquinaSelecionada == null) {
                    throw new Exception("Selecione uma máquina");
                }

//                // Verificar se a máquina está disponível
//                if (!maquinaSelecionada.isDisponivel()) {
//                    throw new Exception("Máquina já está alocada para outro funcionário");
//                }
                // Atualizar campo do Produto com o produto associado à máquina
                ftfProduto.setValue(maquinaSelecionada.getProduto());
                int quantidadeProduzida;
                int QuantidadeMaterial;

                // Para txtQuantidadeProduzida
                Object quantidadeValue = txtQuantidadeProduzida.getValue();
                if (quantidadeValue instanceof Integer) {
                    quantidadeProduzida = (Integer) quantidadeValue;
                } else if (quantidadeValue instanceof String) {
                    quantidadeProduzida = Integer.parseInt((String) quantidadeValue);
                } else {
                    throw new Exception("Quantidade produzida inválida");
                }

// Para spQuantidadeMaterial
                Object materialValue = spQuantidadeMaterial.getValue();
                if (materialValue instanceof Integer) {
                    QuantidadeMaterial = (Integer) materialValue;
                } else if (materialValue instanceof String) {
                    QuantidadeMaterial = Integer.parseInt((String) materialValue);
                } else {
                    throw new Exception("Quantidade de material inválida");
                }
                // Obter e verificar materiais
//            List<Material> materiaisNecessarios = obterMateriaisNecessarios(maquinaSelecionada.getProduto());
//            for (Material material : materiaisNecessarios) {
//                double quantidadeNecessaria = calcularQuantidadeMaterial(material, quantidadeProduzida);
//                if (material.getQuantidade() < quantidadeNecessaria) {
//                    throw new Exception("Estoque insuficiente do material: " + material.getNome());
//                }
//                material.removerEstoque(quantidadeNecessaria);
//              //  materialDAO.atualizar(material);
//            }
//            
                // Configurar a produção
                producao.setFuncionario(funcionarioSelecionado);
                producao.setMaquina(maquinaSelecionada);
                producao.setProduto(maquinaSelecionada.getProduto());
                producao.setQuantidadeProduzida(quantidadeProduzida);
                producao.setDataProducao(new Date());
//            producao.setMateriais(materiaisNecessarios);
                producao.setEstado(true);
                // producao.setLote(lote);

                // Alocar máquina ao funcionário
              //  maquinaSelecionada.alocar(funcionarioSelecionado);
              //  funcionarioSelecionado.setMaquinaAlocada(maquinaSelecionada);

                // Salvar as alterações
                //  maquinaDAO.atualizar(maquinaSelecionada);
                // funcionarioDAO.atualizar(funcionarioSelecionado);
                producaoDAO.salvar(producao);

                JOptionPane.showMessageDialog(this, "Produção registrada com sucesso.");
                limpaFormulario();
                carregarGrade();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar a produção.\n" + ex.getMessage(),
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed

        if (!txtID.getText().isEmpty()) {
            Long id = Long.parseLong(txtID.getText());

            int confirmacao = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir esta produção?", "Confirmação", JOptionPane.YES_NO_OPTION);

            if (confirmacao == JOptionPane.YES_OPTION) {
                try {
                    producaoDAO.remover(id);
                    JOptionPane.showMessageDialog(this, "Produção excluída com sucesso.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir a produção.\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }

                carregarGrade();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma produção para excluir.");
        }


    }//GEN-LAST:event_btExcluirActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        habilitarFormulario(false);
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        if (validarFormulario()) {
            try {
                Producao producao = new Producao();

                // Obter funcionário selecionado
                Funcionario funcionarioSelecionado = (Funcionario) ftfFuncionario.getValue();
                if (funcionarioSelecionado == null) {
                    throw new Exception("Selecione um funcionário");
                }

                // Obter máquina selecionada
                Maquina maquinaSelecionada = (Maquina) ftfMaquina.getValue();
                if (maquinaSelecionada == null) {
                    throw new Exception("Selecione uma máquina");
                }

                // Verificar se a máquina está disponível
                if (!maquinaSelecionada.isDisponivel()) {
                    throw new Exception("Máquina já está alocada para outro funcionário");
                }

                // Atualizar campo do Produto com o produto associado à máquina
                ftfProduto.setValue(maquinaSelecionada.getProduto());
int quantidadeProduzida;
                int QuantidadeMaterial;

                // Obter quantidade de produção
                // Modifique essas linhas para:
// Para txtQuantidadeProduzida
                Object quantidadeValue = txtQuantidadeProduzida.getValue();
                if (quantidadeValue instanceof Integer) {
                    quantidadeProduzida = (Integer) quantidadeValue;
                } else if (quantidadeValue instanceof String) {
                    quantidadeProduzida = Integer.parseInt((String) quantidadeValue);
                } else {
                    throw new Exception("Quantidade produzida inválida");
                }

// Para spQuantidadeMaterial
                Object materialValue = spQuantidadeMaterial.getValue();
                if (materialValue instanceof Integer) {
                    QuantidadeMaterial = (Integer) materialValue;
                } else if (materialValue instanceof String) {
                    QuantidadeMaterial = Integer.parseInt((String) materialValue);
                } else {
                    throw new Exception("Quantidade de material inválida");
                }
                // Obter e verificar materiais
//            List<Material> materiaisNecessarios = obterMateriaisNecessarios(maquinaSelecionada.getProduto());
//            for (Material material : materiaisNecessarios) {
//                double quantidadeNecessaria = calcularQuantidadeMaterial(material, quantidadeProduzida);
//                if (material.getQuantidade() < quantidadeNecessaria) {
//                    throw new Exception("Estoque insuficiente do material: " + material.getNome());
//                }
//                material.removerEstoque(quantidadeNecessaria);
//              //  materialDAO.atualizar(material);
//            }
//            
                // Configurar a produção
                producao.setFuncionario(funcionarioSelecionado);
                producao.setMaquina(maquinaSelecionada);
                producao.setProduto(maquinaSelecionada.getProduto());
                producao.setQuantidadeProduzida(quantidadeProduzida);
                producao.setDataProducao(new Date());
//            producao.setMateriais(materiaisNecessarios);
                producao.setEstado(true);
                // producao.setLote(lote);

                // Alocar máquina ao funcionário
                maquinaSelecionada.alocar(funcionarioSelecionado);
                funcionarioSelecionado.setMaquinaAlocada(maquinaSelecionada);

                // Salvar as alterações
                //  maquinaDAO.atualizar(maquinaSelecionada);
                // funcionarioDAO.atualizar(funcionarioSelecionado);
                producaoDAO.salvar(producao);

                JOptionPane.showMessageDialog(this, "Produção registrada com sucesso.");
                limpaFormulario();
                carregarGrade();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao salvar a produção.\n" + ex.getMessage(),
                        "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }


    }//GEN-LAST:event_btEditarActionPerformed

    private void TbProducaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TbProducaoMouseClicked

    }//GEN-LAST:event_TbProducaoMouseClicked

    private void btnUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuarioActionPerformed
        BuscaMaterial BuscaMaterial = new BuscaMaterial(this);
        BuscaMaterial.setVisible(true);
    }//GEN-LAST:event_btnUsuarioActionPerformed

    private void btnUsuario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuario1ActionPerformed
        BuscaFuncionario buscaUsuario = new BuscaFuncionario(this);
        buscaUsuario.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnUsuario1ActionPerformed

    private void btnUsuario2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuario2ActionPerformed
        BuscaMaquina BuscaMaquina = new BuscaMaquina(this);
        BuscaMaquina.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_btnUsuario2ActionPerformed

    private void rbtAlocarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtAlocarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtAlocarActionPerformed

    private void rbtdesalocarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtdesalocarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtdesalocarActionPerformed

    private void btAdicionarItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarItem1ActionPerformed
        if (validarFormularioItens()) {

        }

    }//GEN-LAST:event_btAdicionarItem1ActionPerformed

    private void btRemoverItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btRemoverItem1ActionPerformed

    /**
     * Seleciona o registro da tabela e preenche o formulário.
     */
    public void selectRegistryTable() {
        int selectedRow = TbProducao.getSelectedRow();
        if (selectedRow != -1) {
            txtID.setText(TbProducao.getValueAt(selectedRow, 0).toString());
            ftfFuncionario.setText(TbProducao.getValueAt(selectedRow, 1).toString());
            ftfMaquina.setText(TbProducao.getValueAt(selectedRow, 2).toString());
            ftfMaterial.setText(TbProducao.getValueAt(selectedRow, 3).toString());
            ftfProduto.setText(TbProducao.getValueAt(selectedRow, 4).toString());
            spQuantidadeMaterial.setValue(TbProducao.getValueAt(selectedRow, 5).toString());
            txtQuantidadeProduzida.setValue(TbProducao.getValueAt(selectedRow, 6).toString());

            habilitarFormulario(true);
        }
    }

    /**
     * Método para habilitar ou desabilitar o formulário.
     */
    private void habilitarFormulario(boolean ativo) {
        btNovo.setEnabled(!ativo);
        btSalvar.setEnabled(ativo && validarFormulario());
        btCancelar.setEnabled(ativo);
        btExcluir.setEnabled(ativo);
        txtID.setEnabled(ativo);
        ftfFuncionario.setEnabled(ativo);
        ftfMaquina.setEnabled(ativo);
        ftfMaterial.setEnabled(ativo);
        ftfProduto.setEnabled(ativo);
        spQuantidadeMaterial.setEnabled(ativo);
        txtQuantidadeProduzida.setEnabled(ativo);

        btEditar.setEnabled(TbProducao.getSelectedRow() >= 0 && ativo);

        TbProducao.setEnabled(!ativo);

        if (!ativo) {
            limpaFormulario();
        }
    }

    /**
     * Habilita o botão salvar se o formulário for válido.
     */
    private void habilitarSalvar() {
        btSalvar.setEnabled(validarFormulario());
    }

    /**
     * Limpa os campos do formulário.
     */
    private void limpaFormulario() {
        txtID.setText("");
        ftfFuncionario.setText("");
        ftfMaquina.setText("");
        ftfMaterial.setText("");
        ftfProduto.setText("");
        spQuantidadeMaterial.setValue(0);
        txtQuantidadeProduzida.setValue(0);
        txtQuantidadeProduzida.setValue(0);
        estadoGroup.clearSelection(); // Limpa a seleção dos botões de estado
        lblMessagem.setText("");
    }

    /**
     * Validação do formulário.
     */
    private boolean validarFormulario() {
        Border borderError = BorderFactory.createLineBorder(Color.RED, 2);
        Border borderNormal = BorderFactory.createLineBorder(Color.GRAY, 1);

        boolean isValid = true;

//        // Validação do campo Quantidade Produzida
//        if (txtQuantidadeProduzida.getText().isEmpty()) {
//            txtQuantidadeProduzida.setBorder(borderError);
//            lblMessagem.setText("Preencha a quantidade produzida.");
//            isValid = false;
//        } else {
//            txtQuantidadeProduzida.setBorder(borderNormal);
//        }
        return isValid;
    }

    // Adicione esses métodos à sua classe de interface
    private void configurarListeners() {
        // Listener para o campo de máquina
        ftfMaquina.addPropertyChangeListener("value", evt -> {
            Maquina maquinaSelecionada = (Maquina) evt.getNewValue();
            if (maquinaSelecionada != null) {
                // Atualiza o produto automaticamente
                ftfProduto.setValue(maquinaSelecionada.getProduto());
            }
        });

        // Listener para o radio button Alocar
        rbtAlocar.addActionListener(e -> {
            if (rbtAlocar.isSelected()) {
                try {
                    Funcionario funcionarioSelecionado = (Funcionario) ftfFuncionario.getValue();
                    Maquina maquinaSelecionada = (Maquina) ftfMaquina.getValue();

                    if (funcionarioSelecionado != null && maquinaSelecionada != null) {
                        if (!maquinaSelecionada.isDisponivel()) {
                            JOptionPane.showMessageDialog(this,
                                    "Máquina já está alocada para outro funcionário",
                                    "Erro",
                                    JOptionPane.ERROR_MESSAGE);

                            rbtAlocar.setSelected(false);
                            return;
                        }

                        // Realizar alocação
                        maquinaSelecionada.alocar(funcionarioSelecionado);
                        funcionarioSelecionado.setMaquinaAlocada(maquinaSelecionada);

                        // Atualizar no banco de dados
                        maquinaDAO.atualizar(maquinaSelecionada);
                        funcionarioDAO.atualizar(funcionarioSelecionado);

                        JOptionPane.showMessageDialog(this,
                                "Máquina " + maquinaSelecionada.getNome()
                                + " alocada ao funcionário " + funcionarioSelecionado.getNome());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                            "Erro ao alocar máquina: " + ex.getMessage(),
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                    System.out.println("Erro ao desalocar máquina: " + ex.getMessage() + "Erro");
                    rbtAlocar.setSelected(false);
                }
            }
        });

        // Listener para o radio button Desalocar
        rbtdesalocar.addActionListener(e -> {
            if (rbtdesalocar.isSelected()) {
                try {
                    Funcionario funcionarioSelecionado = (Funcionario) ftfFuncionario.getValue();
                    Maquina maquinaSelecionada = (Maquina) ftfMaquina.getValue();

                    if (funcionarioSelecionado != null && maquinaSelecionada != null) {
                        // Verificar se a máquina está realmente alocada para este funcionário
                        if (funcionarioSelecionado.getMaquinaAlocada() != maquinaSelecionada) {
                            JOptionPane.showMessageDialog(this,
                                    "Esta máquina não está alocada para este funcionário",
                                    "Erro",
                                    JOptionPane.ERROR_MESSAGE);

                            rbtdesalocar.setSelected(false);
                            return;
                        }

                        // Realizar desalocação
                        maquinaSelecionada.desalocar();
                        funcionarioSelecionado.setMaquinaAlocada(null);

                        // Atualizar no banco de dados
                        maquinaDAO.atualizar(maquinaSelecionada);
                        funcionarioDAO.atualizar(funcionarioSelecionado);

                        JOptionPane.showMessageDialog(this,
                                "Máquina " + maquinaSelecionada.getNome()
                                + " desalocada do funcionário " + funcionarioSelecionado.getNome());
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                            "Erro ao desalocar máquina: " + ex.getMessage(),
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                    System.out.println("Erro ao desalocar máquina: " + ex.getMessage() + "Erro");
                    rbtdesalocar.setSelected(false);
                }
            }
        });
    }

    private boolean validarFormularioItens() {
        if (ftfMaterial.getValue() == null) {
            JOptionPane.showMessageDialog(this, "Produto inválido.", "Alerta", JOptionPane.WARNING_MESSAGE);
            ftfMaterial.requestFocus();
            return false;
        }
        return true;
    }

    private void carregarGrade() {
        ProducaoTableModel tm = (ProducaoTableModel) TbProducao.getModel();
        try {
            tm.setDados(producaoDAO.listarTodos());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar grade.\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    void setMaquina(Maquina Maquina) {
        if (Maquina != null) {
            ftfMaquina.setValue(Maquina);
        } else {
            ftfMaquina.setText(""); // Caso o usuário seja nulo, limpar o campo
        }
    }

    void setMaterial(Material Material) {
        if (Material != null) {
            ftfMaterial.setValue(Material);
        } else {
            ftfMaterial.setText(""); // Caso o usuário seja nulo, limpar o campo
        }
    }

    public void setFuncionario(Funcionario funcionario) {
        // Vamos supor que ftfUsuario seja um JTextField ou similar
        if (funcionario != null) {
            ftfFuncionario.setValue(funcionario);
        } else {
            ftfFuncionario.setText(""); // Caso o usuário seja nulo, limpar o campo
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TbProducao;
    private javax.swing.JButton btAdicionarItem1;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btRemoverItem1;
    private javax.swing.JButton btSalvar;
    private javax.swing.JButton btnUsuario;
    private javax.swing.JButton btnUsuario1;
    private javax.swing.JButton btnUsuario2;
    private javax.swing.ButtonGroup estadoGroup;
    private javax.swing.JFormattedTextField ftfFuncionario;
    private javax.swing.JFormattedTextField ftfMaquina;
    private javax.swing.JFormattedTextField ftfMaterial;
    private javax.swing.JFormattedTextField ftfProduto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMessagem;
    private javax.swing.JRadioButton rbtAlocar;
    private javax.swing.JRadioButton rbtdesalocar;
    private javax.swing.JSpinner spQuantidadeMaterial;
    private javax.swing.JTextField txtID;
    private javax.swing.JSpinner txtQuantidadeProduzida;
    // End of variables declaration//GEN-END:variables

}
